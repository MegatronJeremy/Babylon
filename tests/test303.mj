//Test 303

program test_303

namespace Predmeti{
    const int cinilac = 4, delilac = 3;

	class Predmet
	{
		 int tezina;
		 char vrsta;
		{
			 void postaviTezinu(int tezina) {this.tezina = tezina;}  
			 void ucitajTezinu() { read(tezina); }
			 int zapremina() { return 0;}
			 int Q() {return zapremina() * tezina;} // this NEEDS TO BE PREPENDED HERE
			 void postaviVrstu(char vrsta) {this.vrsta = vrsta;}
			 char dohvVrstu() { return vrsta; }
			 int dohvTezinu() { return tezina; }
			 void ispisi() {
				print(vrsta);
				print(Q()); // prints weight? (needed for sum)
			 }
		}
	}

	class Sfera extends Predmet
	{
		int r;
		{
			 void postaviPoluprecnik(int r) {this.r = r; }
			 
			 int zapremina()
				int z;
			{
				z = cinilac;
				return z * r / delilac;
			}
		}
	}

	class Kvadar extends Predmet
	{
		 int a, b, c;
		 Sfera s;
		{
			 void postaviStranice(int a, int b, int c) {this.a = a; this.b = b; this.c = c;}
			 int zapremina()
				int z;
			{
				z = a * b * c;
				return z;
			}
		}
	}
	
	{}
}

class ProstiBrojevi{

	static int prosti[];
	static int X,i,j;
	static bool flag;

	static{
		print('s'); print('t'); print('a'); print('t'); print('i'); print('c'); print(eol); // prints static
		prosti = new int[10];

		for(X = 0, i = 2; X < 10; i++){
			flag = true;
			for(j = 2; j < i; j++){
				if(i%j == 0){
					flag = false;
					break;
				}
			}
			if(flag){
				prosti[X] = i;
				X++;
			}
		}
	}

}

int zapreminaK, zapreminaS;
int tezinaK, tezinaS;
{

	void ispis( Predmeti::Predmet p)
	{
		p.ispisi(); // prints kind (char) and weight * volume
		print(p.zapremina()); // print volume (needed for sum)
		print(p.dohvTezinu()); // prints weight (set)
		print(eol);
	}
		
	void main() Predmeti::Predmet predmeti[]; int i; Predmeti::Sfera s1, s2, s3; Predmeti::Kvadar k1, k2, k3; int t;
	{
		if(ProstiBrojevi.prosti[9] == 29) print(1); // prints one
		else print(0);
		print(eol);

		predmeti = new Predmeti::Predmet[6];
		s1 = new Predmeti::Sfera();
		s1.postaviPoluprecnik(1);
		s1.postaviVrstu('s');
		s2 = new Predmeti::Sfera();
		s2.postaviPoluprecnik(2);
		s2.postaviVrstu('s');
		s3 = new Predmeti::Sfera();
		s3.postaviPoluprecnik(3);
		s3.postaviVrstu('s');

		k3 = new Predmeti::Kvadar();
		k3.postaviStranice(1,2,3);
		k3.postaviVrstu('k');
		k1 = new Predmeti::Kvadar();
		k1.postaviStranice(2,3,4);
		k1.postaviVrstu('k');
		k2 = new Predmeti::Kvadar();
		k2.postaviStranice(3,4,5);
		k2.postaviVrstu('k');

        print(eol);
        // testing nesting
		k2.s = new Predmeti::Sfera();
		k2.s.postaviVrstu('L');
		k2.s.ispisi();
		print(eol);

		predmeti[0] = s1;
		predmeti[2] = s2;
		predmeti[4] = s3;
		predmeti[1] = k1;
		predmeti[3] = k2;
		predmeti[5] = k3;

		read(t); // 3
		for(i=0; i<6; i++){
			predmeti[i].postaviTezinu(t); 	
		}
		
		zapreminaS = 0;
		tezinaS = 0;
		for(i=1; i<=6;){
			if(i % 2 == 0) {
				i++;
				continue; 
			}
			zapreminaS = zapreminaS + predmeti[i - 1].zapremina();
			tezinaS = tezinaS + predmeti[i - 1].Q();
			ispis(predmeti[i - 1]);
			i++;
		}

		print(eol);
		
		
		zapreminaK = 0; 
		tezinaK = 0;
		i = 1;
		for(i=1; i<=6; ){
			if(i % 2 == 1) {
				i++;
				continue; 
			}
			zapreminaK = zapreminaK + predmeti[i - 1].zapremina();
			tezinaK = tezinaK + predmeti[i - 1].Q();
			ispis(predmeti[i - 1]);
			i++;
		}

		print(eol);
		print(zapreminaS); print(eol);
		print(zapreminaK); print(eol);
		print(tezinaS); print(eol);
		print(tezinaK); print(eol);
	}
}
