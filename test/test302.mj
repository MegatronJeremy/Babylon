//Test 302

program test302

namespace Addition{

	{
	
	int sum(int z, int d)
	{
		return z + d;
	}
	

	int inkrement(int a, int inc) 
		int pom; 
	{
		if(inc == 1) pom = 1;
		else if(inc == 2) pom = a;

		return sum(a,pom);
	}
	
	}
}

namespace Unpacking{
	int niz[],niz2[],niz3[];
	int a,b;
	
	{}
}

int i;
bool ibool;

int niz2;

int niz[];
int a, curr;

{
	
	
	bool verify() {
		print('v');
		return false;
	}	
	
	void main()
	{
		
		if(1!=1) print(-6);
		else print(0);  
			
		ibool = false;
		for(i=0; i < 5; i++){
			if(i == 2) ibool = true;
		}
		
		if(ibool)
			if(i == 5) print(1);
			else print(-1); 	
		a = 2;	
		niz = new int[3];
		niz[0] = 1 * a;
		niz[1] = 2 * a;
		niz[2] = Addition::sum(niz[1], niz[0]) * a + 1;
		if(verify() || niz[2] == 4) print(ord('A')); 
		else print(ord('a'));
		
		print(eol);
		for (i=0; i < 10; ) {
			if(i == 3)
			{
				i++;
				continue;
			}
			if(i == 4) break;
			i = Addition::inkrement(i, 1);
		}
		
		if(i == 3 && verify()) print(-4);
		else print(4);  
		
		read(niz[0]);
		read(niz[1]);
		read(niz[2]);
		print(eol);
		print(Addition::sum(Addition::sum(niz[0], niz[1]), niz[2])); 
			
		print(eol); 
		print(Addition::inkrement(niz[2], 2));
		
		a = 3;
		for (i=0; i < 3; i++){
			niz[i] = niz[i] * 2 * a;
		}
		
		for (i=0; i < 3; i++) print(niz[i]);
		print(eol);
		
		niz2 = 0;
		for (i=0; i < 3; i++) niz2 = niz2 + niz[i] * niz[i];
		print(niz2);
		
		Unpacking::niz = new int[3];
		Unpacking::niz[0] = 1;
		Unpacking::niz[1] = 2;
		Unpacking::niz[2] = 6;
		
		Unpacking::niz2 = new int[1];
		[Unpacking::a,Unpacking::b,*Unpacking::niz2] = Unpacking::niz;
		print(Unpacking::a);
		print(Unpacking::b);
		print(Unpacking::niz2[0]);
		print(eol);
		
		Unpacking::niz2 = new int[1];
		[,Unpacking::a,*Unpacking::niz2] = niz;
		print(Unpacking::a);
		print(Unpacking::niz2[0]);
		print(eol);

		Unpacking::niz2 = new int[2];
		Unpacking::niz3 = new int[1];
		[Unpacking::niz2[0],Unpacking::niz2[Unpacking::niz[0]],*Unpacking::niz3] = Unpacking::niz;

		print(Unpacking::niz2[0]);
		print(Unpacking::niz2[1]);
		print(Unpacking::niz3[0]);
		print(eol);
		
		Unpacking::niz3 = new int[3];
		[*Unpacking::niz3] = niz;
		print(Unpacking::niz3[0]);
		print(Unpacking::niz3[1]);
		print(Unpacking::niz3[2]);
		print(eol);
		
		// Unpacking::niz3 = new int[1];
		// [Unpacking::niz2[0],,Unpacking::niz2[Unpacking::niz[0]],*Unpacking::niz3] = Unpacking::niz; // runtime error!
	
	}
}

