package mjparser;

import java_cup.runtime.*;
import org.apache.log4j.*;
import ast.*;

parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();
        report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing cannot be continued", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append(" on line ")
                .append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" on line ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s + " " + s.value);
	return s;
:}

terminal PROGRAM, BREAK, CLASS;
terminal ELSE, CONST, IF, NEW; 
terminal PRINT, READ; 
terminal RETURN, VOID, EXTENDS, CONTINUE, FOR, STATIC, NAMESPACE;

terminal String IDENT;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;

terminal PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, ASSIGN;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL, AND;
terminal OR, INCREMENT, DECREMENT, SEMI, COLON, COMMA, PERIOD;
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;

nonterminal Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName;

nonterminal NamespaceDeclList, NamespaceDecl;
nonterminal java.lang.String NamespaceName;

nonterminal DeclList, Decl;

nonterminal ConstDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstType;
nonterminal semantics.util.ObjList ConstList;

nonterminal VarDeclList, VarDecl;
nonterminal semantics.util.ObjList VarList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj VarName;

nonterminal ClassDecl, ExtendsClause, ClassBody;
nonterminal StaticVarDeclList, StaticInitList, StaticInitializer, MethodDeclBody;
nonterminal ClassVarDeclListOpt, ClassVarDeclList;

nonterminal MethodDeclList, MethodDecl, MethodTypeName;
nonterminal FormParsOpt, FormParsList;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, MethodType;

nonterminal StatementList, Statement, StatementScopedOpen, ElseStatement;
nonterminal ForDesignStmtListOpt, StatementReturnExpr, StatementPrintNumConst, ForDesignStmtList;

nonterminal DesignatorStatement;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesignatorName, DesignatorOpCall, DesignatorOpt;
nonterminal semantics.util.ObjList DesignatorAssignList;
nonterminal DesignatorOperation;

nonterminal semantics.util.StructList ActPars, ActParsOpt;
nonterminal Condition, CondTerm, CondFact, CondFactOpt;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr, Term, Factor;

nonterminal Label, Assignop, Addop, Mulop;
nonterminal java.lang.String Relop;

precedence left ELSE; 

// Need to check if main exists and has correct namespace and return value
Program ::= (Program) PROGRAM ProgName:p NamespaceDeclList DeclList LBRACE MethodDeclList RBRACE
    ;

// Open program scope 
ProgName ::= (ProgName) IDENT:progName
    ;

// Do nothing here
NamespaceDeclList ::= (NamespaceDeclListExists) NamespaceDeclList NamespaceDecl
    | (NamespaceDeclListEmpty)
    ; 

// Close namespace scope
NamespaceDecl ::= (NamespaceDecl) NAMESPACE NamespaceName LBRACE DeclList LBRACE MethodDeclList RBRACE RBRACE
    ;

// Open namespace scope
NamespaceName ::= (NamespaceName) IDENT:namespaceName
    ;

// Do nothing here
DeclList ::= (DeclListExists) DeclList Decl
    | (DeclListEmpty)
    ;

// Do nothing here
Decl ::= (DeclConst) ConstDecl
    | (DeclVar) VarDecl
    | (DeclClass) ClassDecl
    ;

// Check types for all objects of ConstList
ConstDecl ::= (ConstDecl) CONST Type ConstList SEMI
    ;

// ConstListEmpty -> create empty list, ConstListExists -> add to list
ConstList ::= (ConstListExists) ConstList COMMA ConstType
    | (ConstListEmpty) ConstType
    ;

// Declare here with assigned type
ConstType ::= (ConstNum) IDENT:varName ASSIGN NUM_CONST:numValue
    | (ConstChar) IDENT:varName ASSIGN CHAR_CONST:charValue
    | (ConstBool) IDENT:varName ASSIGN BOOL_CONST:boolValue
    ;

// Do nothing here
VarDeclList ::= (VarDeclListExists) VarDeclList VarDecl
    | (VarDeclListEmpty)
    ;

// Assign type to all variables in list
VarDecl ::= (VarDeclCorrect) Type VarList SEMI
    | (VerDeclError) error SEMI:l
    {: parser.report_error("Badly formed variable declaration on line " + lleft, null); :}
    ;

// Add variables to list
VarList ::= (VarListMultiple) VarList COMMA VarName
    | (VarListSingle) VarName
    | (VarListError) error COMMA:l
    {: parser.report_error("Badly formed variable declaration on line " + lleft, null); :}
      VarName
    ;

// Declare variable here and FIXUP TYPE LATER
VarName ::= (VarScalar) IDENT:varName
    | (VarArray) IDENT:varName LBRACKET RBRACKET
    ;

// TODO classes
ClassDecl ::= (ClassDecl) CLASS IDENT ExtendsClause LBRACE ClassBody RBRACE
    ;

ClassBody ::= (ClassBodyCorrect) StaticVarDeclList StaticInitList ClassVarDeclListOpt MethodDeclBody
    | (ClassBodyVarDeclError) StaticVarDeclList StaticInitList error LBRACE:l
      {: parser.report_error("Badly formed class variable declaration up to line " + lleft, null); :}  
      MethodDeclBody RBRACE
    ;

MethodDeclBody ::= (MethodDeclBodyExists) LBRACE MethodDeclList RBRACE
    | (MethodDeclBodyEmpty)
    ;

ClassVarDeclListOpt ::= (ClassVarDeclListExists) ClassVarDeclList
    | (ClassVarDeclListEmpty)
    ;

ClassVarDeclList ::= (ClassVarDeclListMultiple) ClassVarDeclList VarDecl
    | (ClassVarDeclSingle) VarDecl
    ;

StaticVarDeclList ::= (StaticVarDeclListExists) StaticVarDeclList STATIC VarDecl
    | (StaticVarDeclListEmpty)
    ;

StaticInitList ::= (StaticInitListExists) StaticInitializer StaticInitList
    | (StaticInitListEmpty)
    ;

StaticInitializer ::= (StaticInitializer) STATIC LBRACE StatementList RBRACE
    ;

ExtendsClause ::= (ExtendsClauseExists) EXTENDS Type
    | (ExtendsClauseEmpty)
    | (ExtendsClauseError) error:l 
    {: parser.report_error("Badly formed extends clause on line " + lleft, null); :}
    ;

// Do nothing here
MethodDeclList ::= (MethodDeclListExists) MethodDeclList MethodDecl
    | (MethodDeclListEmpty)
    ;

// Close scope, link locals
MethodDecl ::= (MethodDecl) MethodTypeName LPAREN FormParsOpt RPAREN VarDeclList LBRACE StatementList RBRACE
    ;

// Open scope, declare method
MethodTypeName ::= (MethodTypeName) MethodType IDENT:methodName
    ;

// Take note of return type
MethodType ::= (MethodTypeExists) Type
    | (MethodTypeVoid) VOID
    ;

// Do nothing
FormParsOpt ::= (FormParsExists) FormParsList
    | (FormParsEmpty)
    | (FormParsError) error:l
    {: parser.report_error("Badly formed formal parameter declaration on line " + lleft, null); :}
    ;

// Take note of formal parameters and set inherited type
FormParsList ::= (FormParsListMultiple) FormParsList COMMA Type VarName
    | (FormParsListSingle) Type VarName
    | (FormParsListError) error COMMA:l
    {: parser.report_error("Badly formed formal parameter declaration on line " + lleft, null); :}
      Type VarName
    ;

// Return variable type using name
Type ::= (TypeNamespace) IDENT:typeNamespace COLON COLON IDENT:typeName
    | (TypeNoNamespace) IDENT:typeName
    ;

// Do nothing here
StatementList ::= (StatementListExists) StatementList Statement
    | (StatementListEmpty)
    ;

// TODO do if/for constructs later
Statement ::= (StatementDesignator) DesignatorStatement SEMI
    | (StatementIfElse) IF LPAREN Condition RPAREN Statement ElseStatement
    | (StatementBreak) BREAK SEMI
    | (StatementContinue) CONTINUE SEMI
    | (StatementReturn) RETURN StatementReturnExpr SEMI
    | (StatementRead) READ LPAREN Designator RPAREN SEMI
    | (StatementPrint) PRINT LPAREN Expr StatementPrintNumConst RPAREN SEMI
    | (StatementFor) FOR LPAREN ForDesignStmtListOpt SEMI CondFactOpt SEMI ForDesignStmtListOpt RPAREN Statement
    | (StatementScoped) LBRACE StatementScopedOpen StatementList RBRACE
    | (StatementError) error SEMI:l
    {: parser.report_error("Badly formed designator statement on line " + lleft, null); :}
    ;

ElseStatement ::= (ElseStatementExists) ELSE Statement
    | (ElseStatementEmpty)
    ;

StatementReturnExpr ::= (StatementReturnExprExists) Expr
    | (StatementReturnExprEmpty)
    ;

StatementPrintNumConst ::= (StatementPrintNumConstExists) COMMA NUM_CONST
    | (StatementPrintNumConstEmpty)
    ;

ForDesignStmtListOpt ::= (ForDesignStmtListExists) ForDesignStmtList
    | (ForDesignStmtListEmpty)
    ;

ForDesignStmtList ::= (ForDesignStmtListMultiple) ForDesignStmtList COMMA DesignatorStatement
    | (ForDesignStmtListSingle) DesignatorStatement
    ;

// Open new scope, and close it in StatementScoped
StatementScopedOpen ::= (StatementScopedOpen)
    ;

// Do the checks for the other one as needed
DesignatorStatement ::= (DesignatorOpStmt) DesignatorOperation
    | (DesignatorAssignListStmt) LBRACKET DesignatorAssignList MULTIPLY Designator RBRACKET ASSIGN Designator
    ;

// Make a list of objects here
DesignatorAssignList ::= (DesignatorAssignListExists) DesignatorAssignList DesignatorOpt COMMA
    | (DesignatorAssignListEmpty)
    ;

// Return obj or noObj
DesignatorOpt ::= (DesignatorExists) Designator
    | (DesignatorEmpty)
    ;

// DesignatorOpAssign - check if assignable
// DesignatorOpCall - check if ActPars count matches and if Designator is a method
// DesignatorOpIncrement/Decrement - check if Designator is int
DesignatorOperation ::= (DesignatorOpAssign) Designator Assignop Expr
    | (DesignatorFunction) DesignatorOpCall
    | (DesignatorOpIncrement) Designator INCREMENT
    | (DesignatorOpDecrement) Designator DECREMENT
    ;

// Returns function object
DesignatorOpCall ::= (DesignatorOpCall) Designator LPAREN ActParsOpt RPAREN
    ;

// Do an indexing operation on the passed name
// Check if the type is a class for the first one (TODO)
// Check if the type is an array for the second one
Designator ::= (DesignatorIndOpDot) Designator PERIOD IDENT
    | (DesignatorIndOpBracket) Designator LBRACKET Expr RBRACKET
    | (DesignatorNoInd) DesignatorName
    ;

// Return the object with correct namespace and name
DesignatorName ::= (DesignatorNameNamespace) IDENT:designNamespace COLON COLON IDENT:designName
    | (DesignatorNameNoNamespace) IDENT:designName
    ;

// Count number of ActPars
ActPars ::= (ActParsMultiple) ActPars COMMA Expr
    | (ActParsSingle) Expr
    ;

// Pass along integer
ActParsOpt ::= (ActParsExists) ActPars
    | (ActParsEmpty)
    ;

// Check nothing here
Condition ::= (ConditionOR) Condition OR CondTerm
    | (ConditionCondTerm) CondTerm
    | (ConditionError) error:l
    {: parser.report_error("Badly formed if condition on line " + lleft, null); :}
    ;

// Check nothing here
CondTerm ::= (CondTermAND) CondTerm AND CondFact
    | (CondTermFact) CondFact
    ;

// Check if expression types compatible
// Class or Array can only have != and ==
CondFact ::= (CondFactSingle) Expr
    | (CondFactRelop) Expr Relop Expr
    ;

// TODO This is for For statement
CondFactOpt ::= (CondFactExists) CondFact
    | (CondFactEmpty)
    ;

// Minus - Term must be of type int
// Addop - Expr and Term of type int and compatible
Expr ::= (ExprAddop) Expr Addop Term
    | (ExprPos) Term
    | (ExprNeg) MINUS Term
    ;

// Term and factor must be of type int
Term ::= (TermMulop) Term Mulop Factor
    | (TermFactor) Factor
    ;

Factor ::= (FactorDesignator) Designator
    | (FactorFunctionCall) DesignatorOpCall
    | (FactorNumConst) NUM_CONST
    | (FactorCharConst) CHAR_CONST
    | (FactorBoolConst) BOOL_CONST
    | (FactorNewArray) NEW Type LBRACKET Expr RBRACKET
    | (FactorNewClass) NEW Type LPAREN ActParsOpt RPAREN    
    | (FactorExpr) LPAREN Expr RPAREN
    ;

Label ::= (Label) IDENT
    ;

Assignop ::= (Assignop) ASSIGN
    ;

Relop ::= (RelopEqual) EQUAL
    | (RelopNotEqual) NOT_EQUAL
    | (RelopGreater) GREATER
    | (RelopGreaterEqual) GREATER_EQUAL
    | (RelopLess) LESS
    | (RelopLessEqual) LESS_EQUAL
    ;

Addop ::= (AddopPlus) PLUS
    | (AddopMinus) MINUS
    ;

Mulop ::= (MulopMultiply) MULTIPLY
    | (MulopDivide) DIVIDE
    | (MulopModulo) MODULO
    ;